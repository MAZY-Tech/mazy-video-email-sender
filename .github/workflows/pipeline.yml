name: Deploy Python Lambda with AWS SAM

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
  workflow_dispatch:


jobs:
  test-sonar:
    name: Run Tests & Sonar
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Dependencies
      run: pip install -r src/requirements-test.txt

    - name: Install Project Package
      run: pip install -e .

    - name: Install tox and pysonar
      run: pip install tox pysonar

    - name: Generate coverage report
      run: tox -e py

    - name: Get coverage
      run: cat coverage.xml

    - name: Install SonarScanner
      run: |
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
        unzip sonar-scanner-cli-5.0.1.3006-linux.zip
        echo "$(pwd)/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

    - name: Run SonarQube Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        SONAR_PROJECT_KEY: ${{ vars.SONAR_PROJECT_KEY }}
        SONAR_PROJECT_NAME: ${{ vars.SONAR_PROJECT_NAME }}
        SONAR_ORGANIZATION: ${{ vars.SONAR_ORGANIZATION }}
      run: |
        sonar-scanner \
          -Dsonar.projectKey="$SONAR_PROJECT_KEY" \
          -Dsonar.projectName="$SONAR_PROJECT_NAME" \
          -Dsonar.organization="$SONAR_ORGANIZATION" \
          -Dsonar.sources=src \
          -Dsonar.tests=tests \
          -Dsonar.python.coverage.reportPaths=coverage.xml \
          -Dsonar.language=py \
          -Dsonar.python.version=3.12 \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN"

    - name: Wait and Enforce Quality Gate
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build-and-deploy:
    name: Build and Deploy SAM Application
    runs-on: ubuntu-latest
    needs: test-sonar
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Set up AWS SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Build SAM Application
      run: sam build --use-container

    - name: Deploy SAM Application
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
      run: |
        sam deploy \
          --stack-name ${{ vars.SAM_STACK_NAME }} \
          --s3-prefix ${{ vars.SAM_S3_PREFIX }} \
          --region ${{ vars.AWS_REGION }} \
          --capabilities CAPABILITY_IAM \
          --no-confirm-changeset \
          --resolve-s3 \
          --parameter-overrides \
            VpcSubnets='${{ vars.VPC_SUBNETS }}' \
            VpcSecurityGroups='${{ vars.VPC_SECURITY_GROUPS }}' \
            DatabaseHost='${{ vars.DATABASE_HOST }}' \
            DatabaseUser='${{ vars.DATABASE_USER }}' \
            DatabasePassword='${{ secrets.DATABASE_PASSWORD }}' \
            DatabaseName='${{ vars.DATABASE_NAME }}' \
            SMTPServer='${{ vars.SMTP_SERVER }}' \
            SMTPPort='${{ vars.SMTP_PORT }}' \
            SMTPUser='${{ vars.SMTP_USER }}' \
            SMTPPassword='${{ secrets.SMTP_PASSWORD }}' \
            EmailFrom='${{ vars.EMAIL_FROM }}' \
            TemplateDir='${{ vars.TEMPLATE_DIR }}' \
            CognitoUserPoolId='${{ vars.COGNITO_USER_POOL_ID }}' \
            FrontendVideoUrl='${{ vars.FRONTEND_VIDEO_URL }}' \
            SentryDSN='${{ secrets.SENTRY_DSN }}'
